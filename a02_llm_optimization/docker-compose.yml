version: '3.8'

services:
  # A02 LLM Optimization Service
  a02-llm-service:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        MODEL_PATH: "/app/models/fine_tuned_model.gguf"
        GPU_LAYERS: 20
        CTX_SIZE: 2048
        BATCH_SIZE: 512
    container_name: a02-llm-optimization
    restart: unless-stopped
    ports:
      - "8000:8000"
    volumes:
      - ./models:/app/models:ro
      - ./data:/app/data:ro
      - ./results:/app/results
      - ./logs:/app/logs
      - ./configs:/app/configs:ro
    environment:
      - CUDA_VISIBLE_DEVICES=0
      - MODEL_PATH=/app/models/fine_tuned_model.gguf
      - GPU_LAYERS=20
      - CTX_SIZE=2048
      - BATCH_SIZE=512
      - HOST=0.0.0.0
      - PORT=8000
      - LOG_LEVEL=INFO
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
        limits:
          memory: 8G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - a02-network
    depends_on:
      - redis
      - prometheus

  # Redis for caching and rate limiting
  redis:
    image: redis:7-alpine
    container_name: a02-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - a02-network

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: a02-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - a02-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: a02-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=http://localhost:3000/grafana/
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
    networks:
      - a02-network
    depends_on:
      - prometheus

  # NGINX reverse proxy
  nginx:
    image: nginx:alpine
    container_name: a02-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - a02-network
    depends_on:
      - a02-llm-service
      - grafana
      - prometheus

  # Training service (for fine-tuning)
  a02-trainer:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: a02-trainer
    restart: "no"  # Only run when needed
    volumes:
      - ./models:/app/models
      - ./data:/app/data:ro
      - ./results:/app/results
      - ./logs:/app/logs
      - ./configs:/app/configs:ro
    environment:
      - CUDA_VISIBLE_DEVICES=0
      - PYTHONPATH=/app
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
        limits:
          memory: 8G
    command: ["python3", "scripts/train.py", "--config", "configs/unsloth_config.yaml"]
    networks:
      - a02-network
    profiles:
      - training  # Only start with --profile training

volumes:
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  a02-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

