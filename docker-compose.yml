version: '3.8'

services:
  # Triton Inference Server
  triton-server:
    image: nvcr.io/nvidia/tritonserver:24.01-py3
    runtime: nvidia
    ports:
      - "8000:8000"  # HTTP
      - "8001:8001"  # GRPC
      - "8002:8002"  # Metrics
    volumes:
      - ./a02_llm_optimization/triton_models:/models
      - ./shared_infrastructure/monitoring/triton_config:/opt/tritonserver/config
    environment:
      - CUDA_VISIBLE_DEVICES=0
    command: >
      tritonserver 
      --model-repository=/models 
      --strict-model-config=false 
      --log-verbose=1 
      --http-port=8000 
      --grpc-port=8001 
      --metrics-port=8002 
      --allow-http=true 
      --allow-grpc=true 
      --allow-metrics=true
      --backend-config=python,shm-default-byte-size=134217728
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/v2/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # A02 LLM Optimization Service
  a02-llm-service:
    build:
      context: ./a02_llm_optimization
      dockerfile: Dockerfile
    ports:
      - "8003:8000"
    environment:
      - TRITON_URL=http://triton-server:8000
      - REDIS_URL=redis://redis-cluster:6379
      - MODEL_PATH=/models/deepseek-r1
      - LIGER_KERNEL_ENABLED=true
      - CUDA_VISIBLE_DEVICES=0
    volumes:
      - ./a02_llm_optimization/models:/models
      - ./logs:/app/logs
    depends_on:
      - triton-server
      - redis-cluster
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    restart: unless-stopped

  # A05 Knowledge Base Service
  a05-knowledge-base:
    build:
      context: ./a05_knowledge_base
      dockerfile: Dockerfile
    ports:
      - "8004:8000"
    environment:
      - TRITON_URL=http://triton-server:8000
      - REDIS_URL=redis://redis-cluster:6379
      - CHROMA_URL=http://chroma:8000
      - PINECONE_API_KEY=${PINECONE_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - CRAWL4AI_WORKERS=50
      - MAX_CONCURRENT_SCRAPING=100
    volumes:
      - ./a05_knowledge_base/data:/app/data
      - ./logs:/app/logs
    depends_on:
      - triton-server
      - redis-cluster
      - chroma
      - postgres
    restart: unless-stopped

  # Redis Cluster for caching
  redis-cluster:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: >
      redis-server 
      --appendonly yes 
      --cluster-enabled yes 
      --cluster-config-file nodes.conf 
      --cluster-node-timeout 5000 
      --maxmemory 2gb 
      --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    restart: unless-stopped

  # Chroma Vector Database
  chroma:
    image: chromadb/chroma:latest
    ports:
      - "8005:8000"
    environment:
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_PORT=8000
      - CHROMA_SERVER_CORS_ALLOW_ORIGINS=["*"]
    volumes:
      - chroma_data:/chroma/chroma
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:15
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=optimized_ai_system
      - POSTGRES_USER=ai_user
      - POSTGRES_PASSWORD=ai_password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./shared_infrastructure/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./shared_infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./shared_infrastructure/monitoring/rules:/etc/prometheus/rules
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./shared_infrastructure/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./shared_infrastructure/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    restart: unless-stopped

  # MLflow for ML lifecycle management
  mlflow:
    image: python:3.11-slim
    ports:
      - "5000:5000"
    environment:
      - MLFLOW_BACKEND_STORE_URI=postgresql://ai_user:ai_password@postgres:5432/optimized_ai_system
      - MLFLOW_DEFAULT_ARTIFACT_ROOT=/mlflow/artifacts
      - MLFLOW_SERVER_HOST=0.0.0.0
      - MLFLOW_SERVER_PORT=5000
    volumes:
      - mlflow_data:/mlflow
      - ./shared_infrastructure/mlflow/setup.py:/app/setup.py
    command: >
      bash -c "
        pip install mlflow psycopg2-binary boto3 &&
        python /app/setup.py &&
        mlflow server 
        --host 0.0.0.0 
        --port 5000 
        --backend-store-uri postgresql://ai_user:ai_password@postgres:5432/optimized_ai_system 
        --default-artifact-root /mlflow/artifacts
        --serve-artifacts
      "
    depends_on:
      - postgres
    restart: unless-stopped

  # NGINX Load Balancer
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./shared_infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./shared_infrastructure/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - a02-llm-service
      - a05-knowledge-base
    restart: unless-stopped

  # Elasticsearch for logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    ports:
      - "9200:9200"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    restart: unless-stopped

  # Kibana for log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    restart: unless-stopped

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    restart: unless-stopped

  # API Gateway
  api-gateway:
    build:
      context: ./shared_infrastructure/api_gateway
      dockerfile: Dockerfile
    ports:
      - "8080:8000"
    environment:
      - A02_SERVICE_URL=http://a02-llm-service:8000
      - A05_SERVICE_URL=http://a05-knowledge-base:8000
      - REDIS_URL=redis://redis-cluster:6379
      - RATE_LIMIT_REQUESTS=1000
      - RATE_LIMIT_WINDOW=60
    depends_on:
      - a02-llm-service
      - a05-knowledge-base
      - redis-cluster
    restart: unless-stopped

  # Background Task Worker
  worker:
    build:
      context: ./shared_infrastructure/worker
      dockerfile: Dockerfile
    environment:
      - CELERY_BROKER_URL=redis://redis-cluster:6379/0
      - CELERY_RESULT_BACKEND=redis://redis-cluster:6379/0
      - DATABASE_URL=postgresql://ai_user:ai_password@postgres:5432/optimized_ai_system
    volumes:
      - ./logs:/app/logs
    depends_on:
      - redis-cluster
      - postgres
    restart: unless-stopped

  # Flower for Celery monitoring
  flower:
    build:
      context: ./shared_infrastructure/worker
      dockerfile: Dockerfile
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=redis://redis-cluster:6379/0
    command: celery flower --broker=redis://redis-cluster:6379/0 --port=5555
    depends_on:
      - redis-cluster
      - worker
    restart: unless-stopped

volumes:
  redis_data:
    driver: local
  chroma_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  mlflow_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  default:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

